; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; Check that command line option "-disable-tail-calls" overrides function
; attribute "disable-tail-calls".

; RUN: llc < %s -mtriple=riscv32 \
; RUN: | FileCheck %s --check-prefixes=CALLER1,BLANK
; RUN: llc < %s -mtriple=riscv32 -disable-tail-calls \
; RUN: | FileCheck %s --check-prefixes=CALLER1,NOTAIL
; RUN: llc < %s -mtriple=riscv32 -disable-tail-calls=false \
; RUN: | FileCheck %s --check-prefixes=CALLER1,TAIL

; RUN: llc < %s -mtriple=riscv32 \
; RUN: | FileCheck %s --check-prefixes=CALLER2,BLANK
; RUN: llc < %s -mtriple=riscv32 -disable-tail-calls \
; RUN: | FileCheck %s --check-prefixes=CALLER2,NOTAIL
; RUN: llc < %s -mtriple=riscv32 -disable-tail-calls=false \
; RUN: | FileCheck %s --check-prefixes=CALLER2,TAIL

; RUN: llc < %s -mtriple=riscv32 \
; RUN: | FileCheck %s --check-prefixes=CALLER3,BLANK
; RUN: llc < %s -mtriple=riscv32 -disable-tail-calls \
; RUN: | FileCheck %s --check-prefixes=CALLER3,NOTAIL
; RUN: llc < %s -mtriple=riscv32 -disable-tail-calls=false \
; RUN: | FileCheck %s --check-prefixes=CALLER3,TAIL

; Function with attribute #0 = { "disable-tail-calls"="true" }
define i32 @caller1(i32 %a) #0 {
; BLANK-LABEL: caller1:
; BLANK:       # %bb.0: # %entry
; BLANK-NEXT:    addi sp, sp, -16
; BLANK-NEXT:    sw ra, 12(sp)
; BLANK-NEXT:    call callee
; BLANK-NEXT:    lw ra, 12(sp)
; BLANK-NEXT:    addi sp, sp, 16
; BLANK-NEXT:    ret
;
; NOTAIL-LABEL: caller1:
; NOTAIL:       # %bb.0: # %entry
; NOTAIL-NEXT:    addi sp, sp, -16
; NOTAIL-NEXT:    sw ra, 12(sp)
; NOTAIL-NEXT:    call callee
; NOTAIL-NEXT:    lw ra, 12(sp)
; NOTAIL-NEXT:    addi sp, sp, 16
; NOTAIL-NEXT:    ret
;
; TAIL-LABEL: caller1:
; TAIL:       # %bb.0: # %entry
; TAIL-NEXT:    tail callee
entry:
  %call = tail call i32 @callee(i32 %a)
  ret i32 %call
}

; Function with attribute #1 = { "disable-tail-calls"="false" }
define i32 @caller2(i32 %a) #0 {
; BLANK-LABEL: caller2:
; BLANK:       # %bb.0: # %entry
; BLANK-NEXT:    addi sp, sp, -16
; BLANK-NEXT:    sw ra, 12(sp)
; BLANK-NEXT:    call callee
; BLANK-NEXT:    lw ra, 12(sp)
; BLANK-NEXT:    addi sp, sp, 16
; BLANK-NEXT:    ret
;
; NOTAIL-LABEL: caller2:
; NOTAIL:       # %bb.0: # %entry
; NOTAIL-NEXT:    addi sp, sp, -16
; NOTAIL-NEXT:    sw ra, 12(sp)
; NOTAIL-NEXT:    call callee
; NOTAIL-NEXT:    lw ra, 12(sp)
; NOTAIL-NEXT:    addi sp, sp, 16
; NOTAIL-NEXT:    ret
;
; TAIL-LABEL: caller2:
; TAIL:       # %bb.0: # %entry
; TAIL-NEXT:    tail callee
entry:
  %call = tail call i32 @callee(i32 %a)
  ret i32 %call
}

define i32 @caller3(i32 %a) {
; BLANK-LABEL: caller3:
; BLANK:       # %bb.0: # %entry
; BLANK-NEXT:    tail callee
;
; NOTAIL-LABEL: caller3:
; NOTAIL:       # %bb.0: # %entry
; NOTAIL-NEXT:    addi sp, sp, -16
; NOTAIL-NEXT:    sw ra, 12(sp)
; NOTAIL-NEXT:    call callee
; NOTAIL-NEXT:    lw ra, 12(sp)
; NOTAIL-NEXT:    addi sp, sp, 16
; NOTAIL-NEXT:    ret
;
; TAIL-LABEL: caller3:
; TAIL:       # %bb.0: # %entry
; TAIL-NEXT:    tail callee
entry:
  %call = tail call i32 @callee(i32 %a)
  ret i32 %call
}

declare i32 @callee(i32)

attributes #0 = { "disable-tail-calls"="true" }
attributes #1 = { "disable-tail-calls"="false" }
