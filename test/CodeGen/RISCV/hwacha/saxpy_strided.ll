; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+x -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV64IFDX %s

; Function Attrs: nounwind
declare i64 @llvm.hwacha.veidx() #0

; Function Attrs: noinline nounwind
define dso_local i64 @_pocl_launcher_saxpy_varstride(i64 %vl, float*, float*, float, i64 %stride) {
; RV64IFDX-LABEL: _pocl_launcher_saxpy_varstride:
; RV64IFDX:       # %bb.0: # %body
; RV64IFDX-NEXT:    vpset vp0
; RV64IFDX-NEXT:    @vp0 vlstw vv0, va1, va2
; RV64IFDX-NEXT:    @vp0 vsstw vv0, va1, va2
; RV64IFDX-NEXT:    vstop
body:
  %idx = call i64 @llvm.hwacha.veidx() #0
  %mulidx = mul i64 %idx, %stride
  %arrayidx.i = getelementptr float, float* %0, i64 %mulidx

  %tomul = load float, float* %arrayidx.i, align 4
  store float %tomul, float* %arrayidx.i, align 4

  %vlret = call i64 @llvm.hwacha.vretvl(i64 %vl)
  ret i64 %vlret
}

define dso_local i64 @_pocl_launcher_saxpy(i64 %vl, float*, float*, float) {
; RV64IFDX-LABEL: _pocl_launcher_saxpy:
; RV64IFDX:       # %bb.0: # %body
; RV64IFDX-NEXT:    vpset vp0
; RV64IFDX-NEXT:    @vp0 vlstw vv0, va1, va3
; RV64IFDX-NEXT:    @vp0 vfmul.s vv0, vv0, vs4
; RV64IFDX-NEXT:    @vp0 vlstw vv1, va2, va3
; RV64IFDX-NEXT:    @vp0 vfadd.s vv0, vv1, vv0
; RV64IFDX-NEXT:    @vp0 vsstw vv0, va2, va3
; RV64IFDX-NEXT:    vstop
body:
  %idx = call i64 @llvm.hwacha.veidx() #0
  %mulidx = mul i64 %idx, 3
  %arrayidx.i = getelementptr float, float* %0, i64 %mulidx
  %tomul = load float, float* %arrayidx.i, align 4
  %mul.i = fmul float %tomul, %2

  %arrayidx2.i = getelementptr float, float* %1, i64 %mulidx
  %toadd = load float, float* %arrayidx2.i, align 4
  %add.i = fadd float %toadd, %mul.i
  store float %add.i, float* %arrayidx2.i, align 4

  %vlret = call i64 @llvm.hwacha.vretvl(i64 %vl)
  ret i64 %vlret
}

define dso_local void @_pocl_launcher_saxpy_workgroup(float*, float*, float) {
; RV64IFDX-LABEL: _pocl_launcher_saxpy_workgroup:
; RV64IFDX:       # %bb.0:
; RV64IFDX-NEXT:    addi sp, sp, -16
; RV64IFDX-NEXT:    sd s0, 8(sp)
; RV64IFDX-NEXT:    sd s1, 0(sp)
; RV64IFDX-NEXT:    mv s0, a0
; RV64IFDX-NEXT:    addi a0, zero, 12
; RV64IFDX-NEXT:    addi s1, zero, 4
; RV64IFDX-NEXT:    vmcs vs1,s1
; RV64IFDX-NEXT:    vmcs vs4,a2
; RV64IFDX-NEXT:    vmca va1,s0
; RV64IFDX-NEXT:    vmca va2,a1
; RV64IFDX-NEXT:    vmca va3,a0
; RV64IFDX-NEXT:    vsetcfg a0,0,2,0,1
; RV64IFDX-NEXT:    vsetvl a0,s1
; RV64IFDX-NEXT:    la a0, _pocl_launcher_saxpy
; RV64IFDX-NEXT:    vf 0(a0)
; RV64IFDX-NEXT:    fmv.x.w a0, ft0
; RV64IFDX-NEXT:    addi a1, zero, 8
; RV64IFDX-NEXT:    vmcs vs1,s1
; RV64IFDX-NEXT:    vmcs vs4,a0
; RV64IFDX-NEXT:    vmca va1,s0
; RV64IFDX-NEXT:    vmca va2,a1
; RV64IFDX-NEXT:    vsetcfg a0,0,1,0,1
; RV64IFDX-NEXT:    vsetvl a0,s1
; RV64IFDX-NEXT:    la a0, _pocl_launcher_saxpy_varstride
; RV64IFDX-NEXT:    vf 0(a0)
; RV64IFDX-NEXT:    ld s1, 0(sp)
; RV64IFDX-NEXT:    ld s0, 8(sp)
; RV64IFDX-NEXT:    addi sp, sp, 16
; RV64IFDX-NEXT:    ret
  %newvl0 = call i64 @_pocl_launcher_saxpy(i64 4, float* %0, float* %1, float %2)
  %newvl = call i64 @_pocl_launcher_saxpy_varstride(i64 4, float* %0, float* %1, float %2, i64 2)
  ret void
}


attributes #0 = { nounwind }
attributes #1 = { noinline }

declare i64 @llvm.hwacha.vretvl(i64)

!opencl.kernels = !{!2, !3}

!0 = !{!"clang version 3.7.0  (git@github.com:riscv/riscv-llvm b701702c63e224dd309b5b016a91641264eb181d)"}
!1 = !{!"clang version 3.7.0  (git@github.com:riscv/riscv-llvm e40d0933929057622d08a7b68fc90773d912ecaa)"}
!2 = !{i64 (i64, float*, float*, float, i64)* @_pocl_launcher_saxpy_varstride}
!3 = !{i64 (i64, float*, float*, float)* @_pocl_launcher_saxpy}
