; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+x -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV64IFDX %s

; Function Attrs: nounwind
declare i64 @llvm.hwacha.veidx() #0
declare i64 @llvm.hwacha.vretvl(i64)

; Function Attrs: noinline nounwind
define dso_local i64 @_pocl_launcher_saxpy(i64, float*, double*, double) {
; RV64IFDX-LABEL: _pocl_launcher_saxpy:
; RV64IFDX:       # %bb.0:
; RV64IFDX-NEXT:    vpset vp0
; RV64IFDX-NEXT:    @vp0 vlw vv2, va1
; RV64IFDX-NEXT:    @vp0 vfcvt.d.s vv0, vv2
; RV64IFDX-NEXT:    @vp0 vfmul.d vv0, vv0, vs4
; RV64IFDX-NEXT:    @vp0 vld vv1, va2
; RV64IFDX-NEXT:    @vp0 vfadd.d vv0, vv1, vv0
; RV64IFDX-NEXT:    @vp0 vsd vv0, va2
; RV64IFDX-NEXT:    vstop
  %idx = call i64 @llvm.hwacha.veidx() #0
  %arrayidx.i = getelementptr float, float* %1, i64 %idx
  %5 = load float, float* %arrayidx.i, align 4
  %conv.i = fpext float %5 to double
  %mul.i = fmul double %conv.i, %3

  %arrayidx2.i = getelementptr double, double* %2, i64 %idx
  %6 = load double, double* %arrayidx2.i, align 4
  %add.i = fadd double %6, %mul.i
  store double %add.i, double* %arrayidx2.i, align 4

  %vlret = call i64 @llvm.hwacha.vretvl(i64 %0)
  ret i64 %vlret
}

define dso_local void @_pocl_launcher_saxpy_workgroup(i8**, { i32, [3 x i64], [3 x i64], [3 x i64] }*) {
; RV64IFDX-LABEL: _pocl_launcher_saxpy_workgroup:
; RV64IFDX:       # %bb.0:
; RV64IFDX-NEXT:    ld a1, 16(a0)
; RV64IFDX-NEXT:    lwu a2, 0(a1)
; RV64IFDX-NEXT:    lwu a1, 4(a1)
; RV64IFDX-NEXT:    slli a1, a1, 32
; RV64IFDX-NEXT:    or a1, a1, a2
; RV64IFDX-NEXT:    ld a2, 8(a0)
; RV64IFDX-NEXT:    ld a2, 0(a2)
; RV64IFDX-NEXT:    ld a0, 0(a0)
; RV64IFDX-NEXT:    ld a0, 0(a0)
; RV64IFDX-NEXT:    addi a3, zero, 12
; RV64IFDX-NEXT:    vmcs vs1,a3
; RV64IFDX-NEXT:    vmcs vs4,a1
; RV64IFDX-NEXT:    vmca va1,a0
; RV64IFDX-NEXT:    vmca va2,a2
; RV64IFDX-NEXT:    vsetcfg a0,2,1,0,1
; RV64IFDX-NEXT:    vsetvl a0,a3
; RV64IFDX-NEXT:    la a0, _pocl_launcher_saxpy
; RV64IFDX-NEXT:    vf 0(a0)
; RV64IFDX-NEXT:    ret
  %3 = bitcast i8** %0 to float***
  %4 = load float**, float*** %3, align 8
  %5 = load float*, float** %4, align 8
  %6 = getelementptr i8*, i8** %0, i64 1
  %7 = bitcast i8** %6 to double***
  %8 = load double**, double*** %7, align 8
  %9 = load double*, double** %8, align 8
  %10 = getelementptr i8*, i8** %0, i64 2
  %11 = bitcast i8** %10 to double**
  %12 = load double*, double** %11, align 8
  %13 = load double, double* %12, align 4
  %newvl = call i64 @_pocl_launcher_saxpy(i64 12, float* %5, double* %9, double %13)
  ret void
}


define void @pocl.barrier() {
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { noinline }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !1}
!opencl.kernels = !{!2}

!0 = !{!"clang version 3.7.0  (git@github.com:riscv/riscv-llvm b701702c63e224dd309b5b016a91641264eb181d)"}
!1 = !{!"clang version 3.7.0  (git@github.com:riscv/riscv-llvm e40d0933929057622d08a7b68fc90773d912ecaa)"}
!2 = !{i64 (i64, float*, double*, double)* @_pocl_launcher_saxpy}
